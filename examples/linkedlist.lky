Error = <'Error'>;

List = class {
    proto count: 0
    proto head: nil

    init self: func() {
        self.head = nil;
        self.count = 0;
    }

    static fromArray: func(arr) -> cls {
        new = cls.new();
        cur = nil;
        start = nil;
        ct = 0;

        for e in arr {
            node = new.makeNode(e);
            if !cur {
                cur = node;
                start = cur;
            } else {
                cur.next = node;
                cur = node;
            }

            ct += 1;
        }

        new.head = start;
        new.count = ct;

        ret new;
    }

    proto makeNode: func(obj) {
        ret {
            .next: nil,
            .payload: obj
        };
    }

    proto getLast: func() -> self {
        if !self.head {
            ret nil;
        }

        for node = self.head; node.next; node = node.next {}

        ret node;
    }

    proto append: func(obj) -> self {
        new = self.makeNode(obj);
        last = self.getLast();

        if !last { self.head = new; }
        else     { last.next = new; }

        self.count += 1;
        ret self;
    }

    proto iterable_: func() -> self {
        arr = [];
        for node = self.head; node; node = node.next {
            arr.append(node.payload);
        }

        ret arr;
    }

    proto op_get_index_: func(idx) -> self {
        if !self.head {
            ret nil;
        }

        ct = 0;
        for node = self.head; ct < idx & node.next; node = node.next { ct += 1; }

        if ct == idx {
            ret node.payload;
        }

        raise Error('IndexOutOfBounds', 'The given index is not valid for the list');
    }

    proto op_set_index_: func(idx, obj) -> self {
        if !self.head {
            -- This really should be an error.
            ret;
        }

        ct = 0;
        for node = self.head; ct < idx & node.next; node = node.next { ct += 1; }

        if ct == idx {
            node.payload = obj;
        }
        else {
            raise Error('IndexOutOfBounds', 'The given index is not valid for the list');
        }
    }

    proto stringify_: func() -> self {
        str = "(";
        len = self.count;

        for el, i in self {
            str += el;
            if i < len - 1 {
                str += ', ';
            }
        }
        str += ")";
        ret str;
    }

    static hotPatch: func() -> cls {
        cls.model_.sum = func() -> self {
            sum = 0;
            for e in self {
                sum += e;
            }

            ret sum;
        };
    }
};


ret List;
