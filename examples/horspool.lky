Io = <"Io">;
Table = <"Table">;

Table.model_.prt = func() -> self {
    Io.putln('-------');
    for key in self.keys() {
        Io.putln(' ' + key + ' | ' + self[key]);
    }
};

build_shift_table = func(str) {
    tab = [:]; -- Create a new hashtable
    len = str.length;
    for i = 0; i < len; i += 1 {
        -- Assign value in table to character
        tab[str[i]] = len - i - 1;
    }

    ret tab;
};

horspool = func(search, text) {
    -- Cache lengths for future use (lanky isn't
    -- clever enough; there are exactly 0 compiler
    -- optimizations.
    slen = search.length;
    tlen = text.length;

    -- Create the shift table
    shifts = build_shift_table(search);

    i = 0;
    for i <= tlen - slen {
        for j = i + slen - 1; search[j - i] == text[j]; j -= 1 {
            if j == i {
                ret j;
            }
        }

        -- Get the shift value
        shift = shifts[text[j]];

        -- The next line replaces: i += shift ? shift : slen;
        i += shift ?? slen;
    }

    ret -1;
};

-- An example
text = "the quick brown fox jumps over the lazy dog.";
search = "jump";
idx = horspool(search, text);
Io.putln(idx + ":");
Io.putln(text);
Io.putln((" " * idx) + search);

if Io.prompt('\nPrint shift table? (y/n): ') == 'y' {
    build_shift_table(search).prt();
}
