Documentation = load '../examples/Documentation.lky';
Time = load 'Time';
String = load 'String';
Meta = load 'Meta';

Documentation.new().
    Title("Lanky Standard Library").
    Description("Official documentation for the lanky standard library. Auto generated on " + Time.new().format('%b %d %Y') + ". Interpreter version at time of generation: " + Meta.version + ".").
    Class("Array", "The wrapper around the interpreter's arraylist implementation.").
        ProtoField("count", "The number of elements contained in the array").
        ProtoField("ab_", "The binary blob that contains the actual C arraylist").
        ProtoMethod("get", 1, "Gets the item at the given index",
                ["index", "The index to get"],
                "Like the `set` method, this is a very fast operation as we are dealing with an arraylist implementation, rather than a linked list. The method will throw and error if the index is out of bounds or not a valid integer.").
        ProtoMethod("set", 2, "Sets the item at the given index",
                ["index", "The index to set", "nval", "The new value to set"],
                "Like the `get` method, this is a very fast operation (should be O(1)). The method will throw an error if the index is out of bounds or is not a valid integer.").
        ProtoMethod("forEach", 1, "Iteratively executes a callback",
                ["callback", "A callback function taking 1 or 2 arguments"],
                "`callback` will be called for each element in the array. If the callback takes only one argument, only the element will be passed in. If two, the second argument will be set to the index.").
        ProtoMethod("contains", 1, "Returns `yes` if and only if the given element is in the array",
                ["e", "The element to find"],
                "Each element will be checked until `e` is found. The array is aware of overloaded == methods, so values will be compared correctly.").
        ProtoMethod("indexOf", 1, "Returns the index of an element or `-1` if it can't be found.",
                ["e", "The element to find"],
                "Same as `contains`.").
        ProtoMethod("removeAt", 1, "Removes the object at a given index, returning the object to the caller",
                ["index", "The index to remove"], "This can be a slow operation since the list is abstracted over an arraylist.").
        ProtoMethod("joined", 2, "Joins the elements of the array as a string",
                ["joiner", 'The string to use to join the elements', '[quotes]', 'Should strings have quotes included? (defaults to `no`)'],
                "This implementation is relatively fast. Elements will be either natively turned to strings or will have their `stringify_` method called if they have one.").
        ProtoMethod("insert", 2, "Inserts an element at an arbitrary position in the array",
                ['e', 'The element to insert', 'index', 'The position where the new element will end up'],
                'All elements at position `index` and after will be pushed down. This is an expensive operation.').
        ProtoMethod('copy', 0, 'Creates a new array with the same contents', [], '').
        ProtoMethod('map', 1, 'Creates a new array whose elements are determined by using a callback',
                ['callback', 'The function that will map each element'],
                'The new array will have elements returned by the callback. The callback should have only one parameter, the incoming element.').
        ProtoMethod('reduce', 1, 'Iterates over the array using a callback to accumulate a variable',
                ['callback', 'The function that will reduce the array'],
                'The function should take two parameters, the first being the accumulator, the second being the current element. When the function is first called, the accumulator will be `nil`. After the first call, the accumulator is whatever was returned from the previous call. At the end the accumulator is returned.').
        ProtoMethod('size_', 0, 'Returns the number of elements currently allocated for the list', [], '').
        ProtoMethod('stringify_', 0, 'Returns the array as a string', [], '').
        ProtoMethod('op_get_index_', 1, 'For square bracket indexing syntactic sugar. See `get` method above', [], '').
        ProtoMethod('op_set_index_', 2, 'For square bracket setting. See `set` method above', [], '').
        StaticMethod('new', 0, 'Standard init method; returns an empty array', [], 'Has same effect as typing the literal `[]`.').
        StaticMethod('memcpy', 3, "Light wrapper around C's `memcpy`",
                ['dest', 'The destination array', 'src', 'The source array', 'num', 'The number of members to copy'],
                "This is a fast way to duplicate arrays. The size copied is not actually `num` as it would be with memcpy. Rather it is `num * sizeof(void *)`. This method will return an error value if the size of the destination or the source do not match the count required.").
        StaticMethod('alloc', 1, 'Returns a new array allocated to contain some number of elements',
                ['num', 'The number of elements for which to allocate'],
                'Arrays are normally initialized to contain 10 elements. With this method you can request an array pre-allocated to contain some set number of elements. Recommended for performance-critical applications').
    EndClass().
    Class('Convert', 'A standard library to convert between various native types').
        StaticMethod('toInt', 1, 'Converts an element to an integer type',
                ['obj', 'The object to convert'],
                'This method will try all conversions. It can handle floats and strings by default.').
        StaticMethod('toFloat', 1, 'Converts an element to a floating point type',
                ['obj', 'The object to convert'],
                'Method will do its best to convert to a float and return.').
        StaticMethod('toString', 1, 'Converts an element to a string',
                ['obj', 'The object to convert'],
                'Method will convert objects to string by using the default stringify function.').
        StaticMethod('toOrd', 1, 'Converts a string value to a character number',
                ['str', 'The string to convert'],
                'Method will return the numerical value represented by the first char in the string.').
        StaticMethod('toChar', 1, 'Converts a numerical value to a character',
                ['num', 'The number to convert'],
                'Method will return a string with one character that represents the number passed in.').
    EndClass().
    Class('Io', 'Interface for standard IO behavior with the terminal').
        StaticMethod('put', 1, 'Prints the argument with no trailing newline',
                ['obj', 'The object to print'],
                "The printed value will be a stringified version of the object. If `obj` is a native type, it will be directly converted. Otherwise the object's `stringify_` method will be called. Depending on your configuration, the standard out buffer may not be flushed by this operation.").
        StaticMethod('putln', 1, 'Prints the argument with a trailing newline',
                ['obj', 'The object to print'],
                "Functions exactly as `put` above, but adds a newline. Note that this will also flush the buffer").
        StaticMethod('prompt', 1, 'Gets a line of user input, first printing the argument as a prompt',
                ['obj', 'The object to print as a prompt'],
                "First the object is printed, then the method waits for the user to type input and press the return key. The method returns this input as a string, without the trailing newline.").
        StaticMethod('fopen', 2, 'Wrapper around the standard C `fopen` function',
                ['path', 'The relative or absolute path to the file', 'flags', 'The read/write flags (r, w, b, etc..)'],
                "This method will attempt to open the file. If the file is not found or is invalid, this method will throw an error. If the file is found and the requested mode is valid, a file object will be returned. Please see the `File` class for more information of applicable methods.").
    EndClass().
    Class('File', 'The standard file interface. Note that this class may not be instantiated directly. Rather a file object can be requested using the `Io.fopen(...)` method.').
        ProtoField('EOF', 'A flag that is set to `yes` or `no`, depending on whether or not the end of the file has been reached.').
        ProtoField('fb_', 'The binary blob containing the file information').
        ProtoMethod('getln', 0, 'Reads a line of input for files in "r" mode', [],
                'This method will throw an error if the file mode is incorrect. If the end of the file has been reached (`EOF` will be set in this case), then the method returns `nil`. Otherwise, it will return a string stripped of the newline containing the contents of the line at the current position in the file.').
        ProtoMethod('getlns', 0, 'Reads the contents of the file into an array', [],
                'The method will return an array of strings representing lines in the file (this is implemented in C and is therefore faster than calling `getall().split(...)`). The strings in the array will have been stripped of their newlines. Note that this will not rewind the file; rather it will return all of the lines from the current position. `EOF` will be set to `yes`. If the file mode is incorrect, this method will throw an error.').
        ProtoMethod('getall', 0, 'Reads the contents of the file into a string', [],
                'This method will read the entire file into a string, newlines included. `EOF` will be set to `yes`. If the file mode is incorrect, an error will be thrown.').
        ProtoMethod('put', 1, 'Outputs the argument to the file',
                ['obj', 'The object to print'],
                'Stringifies the object and prints the result into the file, incrementing the position (note that no newline is added). This is the `File` counterpart of the `Io.put(...)` method. An error will be thrown if the file mode is incorrect.').
        ProtoMethod('putln', 1, 'Outputs the argument to the file and appends a newline',
                ['obj', 'The object to print'],
                'Same as the `put` method above, but includes a newline.').
        ProtoMethod('rewind', 0, 'Sets the file pointer to the beginning of the file', [], '').
        ProtoMethod('close', 0, 'Closes the output stream and cleans up resources', [], '').
    EndClass().
    Class('Function', 'The nebulous function type; cannot be directly instantiated. The following methods work on any Lanky function in the interpreter context').
        ProtoField('argc', 'The number of arguments the function takes').
        ProtoMethod('bind', 1, 'Binds the function to some object',
                ['obj', 'The object to bind on'],
                'When you write a function as `func() -> self {}`, `self` is considered the bound variable. Unlike in JavaScript, the `self` is not implicit. You will get an error if you try to bind a function that does not have a refname set. When a method is retrieved through dot notation (i.e. `obj.method()`), the `method` func is automatically bound to `obj`. This method is merely a manual way of doing the same thing. Thus, `obj.method()` is the same as `method.bind(obj)()`. The method returns the original function to make this kind of calling possible.').
        ProtoMethod('args_', 0, 'Returns an array of the names of the arguments', [], 'This method will fail on functions using native code; it is only valid if the function is compiled as Lanky bytecode.').
    EndClass().
    Class('Math', 'A common class to aggregate mathematical functions. All of the static methods below can be used standalone (i.e. they are not bound to the Math class).').
        StaticField('pi', 'A floating-point constant representing <i>&pi;</i>').
        StaticField('e', 'A floating-point constant representing <i>e</i>').
        StaticMethod('rand', 0, "Simple wrapper for C's `rand` function", [], 'The random number generator is initialized when the interpreter spins up.').
        StaticMethod('randInt', 2, "Generates a random number between two bounds",
                ['min', 'The minimum value (inclusive) for the generator', 'max', 'The maximum value (exclusive)'],
                'This function will return a random number between `min` and `max`. Mathematically the range of this function can be expressed as `[min, max)`.').
        StaticMethod('shuffle', 1, 'Shuffles the given array',
                ['arr', 'The array to shuffle'],
                'This method will return an array that contains the shuffled elements of the input.').
        StaticMethod('range', 1, 'Returns an array of a range of numbers',
                ['max', 'The max value in the range (exclusive)'],
                'This method will return an array containing the range of numbers `[0, max)`.').
        StaticMethod('atan2', 2, "Wrapper around C's `atan2` function",
                ['y', 'The arctangent y value', 'x', 'The arctangent x value'], '').
        StaticMethod('abs', 1, "Wrapper around C's `fabs` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('sin', 1, "Wrapper around C's `sin` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('cos', 1, "Wrapper around C's `cos` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('tan', 1, "Wrapper around C's `tan` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('acos', 1, "Wrapper around C's `acos` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('asin', 1, "Wrapper around C's `asin` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('atan', 1, "Wrapper around C's `atan` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('cosh', 1, "Wrapper around C's `cosh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('sinh', 1, "Wrapper around C's `sinh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('tanh', 1, "Wrapper around C's `tanh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('acosh', 1, "Wrapper around C's `acosh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('asinh', 1, "Wrapper around C's `asinh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('atanh', 1, "Wrapper around C's `atanh` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('exp', 1, "Wrapper around C's `exp` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('log', 1, "Wrapper around C's `log` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('sqrt', 1, "Wrapper around C's `sqrt` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('ceil', 1, "Wrapper around C's `ceil` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('floor', 1, "Wrapper around C's `floor` function", ['x', 'The numeric input to the function'], '').
        StaticMethod('round', 1, "Wrapper around C's `round` function", ['x', 'The numeric input to the function'], '').
    EndClass().
    Class('Meta', 'An in-context interface for the interpreter').
        StaticField('version', 'The current version number (major, minor, and revision) of the interpreter').
        StaticField('versionTag', 'The tagline that accompanies the current version').
        StaticField('copyright', 'The standard copyright tag').
        StaticMethod('exec', 1, 'Compiles and executes the given string',
                ['codestr', 'The string to execute'],
                'This function will compile `codestr` and execute it in the current interpreter context.').
        StaticMethod('repl', 0, 'Launches the standard REPL', [], 'The REPL that runs under this method is the same as the one used when the interpreter is run without file arguments. When the session ends (i.e. with the user typing Ctrl^d), control is returned to the program.').
        StaticMethod('examine', 1, 'Provides an overview of the given object',
                ['obj', 'The object to examine'],
                'In most cases, this will just give cursory information. If a function is supplied, this method will decompile and print the opcodes in a pleasing fashion. Useful for debugging and learning about the interpreter.').
        StaticMethod('addressOf', 1, 'Returns the address of the given object',
                ['obj', 'The object whose address we wish to retrieve'],
                'This method will return a string representing the address of the given object in hexadecimal form').
        StaticMethod('allowIntTags', 1, 'Sets whether or not to allow tagged integers',
                ['allow', 'Boolean value'],
                'If `allow` is set to `yes`, the interpreter will be allowed to use tagged integers in place of actual objects (this is the default behavior). If `no`, all new integers created will be full-fledged objects.').
        StaticMethod('audit', 0, 'Prints the size in bytes of the various C object structs', [], 'Used exclusively for debugging purposes').
    EndClass().
    Class('Object', 'The root object class that from which everything else inherits').
        StaticMethod('new', 0, 'The basic constructior', [],
                'This method has the same effect as using the object literal `{.}`').
        ProtoMethod('has', 1, 'Returns true if the object has a member with the given name',
                ['name', 'The name of the member to check for'], 'This method will return `yes` if the object has any member with the given name. Note that this checks for any object, unlike `responds_to`, so if the object has a field or a method whose name matches, the method returns in the affirmative.').
        ProtoMethod('responds_to', 1, 'Returns true only if the object responds to a method of the given name',
                ['name', 'The name of the method to check for'],
                'Unlike `has`, this method will only respond true if the object has a member `name` and that member is a function.').
        ProtoMethod('remove_member', 1, 'Removes the member of the specified name if it exists',
                ['name', 'The name of the member to remove'],
                "This is the only way to actively remove a member of an object (simply setting its value to nil will not have the same effect). Note that this will not effect any of the object's prototypes; only members of the object itself can be removed.").
        ProtoMethod('stringify_', 0, 'Turns the object into a string', [],
                'This is the default stringification function for all objects. Its form is as follows: `(lky_object | %p)` where `%p` is the pointer to the object. Individual objects can and should override this method.').
        ProtoMethod('op_equals_', 1, 'Returns `yes` if and only if the object and the argument are equal',
                ['other', 'The object to compare to'],
                'This is the default equals implementation. This method is only concerned with whether or not the pointer values match.').
    EndClass().
    Class('OS', 'A static class used for interfacing with the operating system').
        StaticField('argc', 'The number of arguments passed to the script').
        StaticField('argv', 'An array of arguments (as strings) passed to the script').
        StaticMethod('system', 1, 'Wrapper around the C `system` function',
                ['command', 'The command to run in the shell'],
                'This method just wraps the C `system` function, so this is very much OS dependant. Generally the `command` will be executed in the local shell.').
    EndClass().
    Class('String', 'The standard (builtin) string library. All strings are fixed-width single character arrays. If you want unicode, look elsewhere.').
        ProtoField('length', 'The length of the string').
        ProtoField('sb_', 'The binary blob containing the pointer to the C string').
        StaticMethod('new', 0, 'Basic initializer; returns an empty string. Same as the string literal `""`', [], '').
        ProtoMethod('reverse', 0, 'Reverses the string', [], 'A new string is created whose contents are the reverse of the original string. This is then returned.').
        ProtoMethod('split', 1, 'Splits the string based on some delimeter',
                ['delim', 'The delimeter to use to split'],
                'This method will split the string into an `Array` by scanning for the delimeters. Regexes are not accepted or recognized by the method. The strings in the returned array do not have the delimeter attached. If the delimeter is not contained in the string, an array of count 1 is returned.').
        ProtoMethod('lower', 0, 'Returns the string with all characters in miniscule form', [], '').
        ProtoMethod('upper', 0, 'Returns the string with all characters in majuscule form', [], '').
        ProtoMethod('copy', 0, 'Returns a newly-allocated replica string', [], '').
        ProtoMethod('stringify_', 0, 'Returns itself (mostly just a formality)', [], '').
        ProtoMethod('hash_', 0, 'Returns a hash value of the string (using the `djb2` algorithm)', [],
                'Note that, unlike most objects, the `Table` methods do not actually use this method on string. Since strings are such a common case, it handles them directly in its hashing delegate.').
        ProtoMethod('iterable_', 0, 'Returns an array where each character has its own position', [], 'Used with the `for .. in .. {}` construct.').
        ProtoMethod('op_get_index_', 1, 'Gets the character at the given index',
                ['index', 'The index to get'], 'This is to be used with the array indexing syntactic sugar.').
        ProtoMethod('op_set_index_', 2, 'Sets the character at the given index',
                ['index', 'The index to set', 'char', 'The character to use'],
                'Used for the syntactic sugar. Note that this means that the string is not immutable.').
        ProtoMethod('op_equals_', 1, 'Works with `==`; returns `yes` if objects are equivalent',
                ['other', 'The object to test against'], 'Implemented using `strcmp`.').
        ProtoMethod('op_notequal_', 1, 'Works with `!=`; opposite of `op_equals_` above.',
                ['other', 'The object to test against'], '').
        ProtoMethod('op_add_', 1, 'Works with `+`; combines strings',
                ['other', 'Object to append'],
                'Returns a new string that is the combination of `self` and `other`. If `other` is a string, great; otherwise `other` is stringified according to stringification rules and appended.').
        ProtoMethod('op_gt_', 1, 'Works with `>`; compares strings',
                ['other', 'Object to test against'], '').
        ProtoMethod('op_lt_', 1, 'Works with `<`; compares strings',
                ['other', 'Object to test against'], '').
        ProtoMethod('op_multiply_', 1, 'Works with `*`; duplicates the string',
                ['count', 'The number of times to multiply the string'],
                'Returns a concatination of the string `count` times (i.e. `"a" * 5 == "aaaaa"`). This method will fail if `count` is not an integer.').
    EndClass().
    Class('Table', 'A quick hashtable implementation; wraps the interpreter hashtable (which is used for storing members). Custom objects can override default hash behavior by implementing their own `hash_` method. Note that if you use your own `hash_` method, you should also specify your own `op_equals_` method.').
        ProtoField('count', 'The number of elements in the table').
        ProtoField('size_', 'The number of buckets allocated for the table').
        ProtoField('hb_', 'The binary blob holding a reference to the actual hashtable').
        ProtoMethod('put', 2, 'Inserts a value into the table',
                ['key', 'The key to use', 'value', 'The value to insert'],
                'Hashes key and puts value in the table at the proper location').
        ProtoMethod('get', 1, 'Gets a value from the table',
                ['key', 'The key to use'],
                'Hashes key and returns a value if found, otherwise returns `nil`.').
        ProtoMethod('hasKey', 1, 'Returns `yes` if the table contains a given key',
                ['key', 'The key to look for'], '').
        ProtoMethod('hasValue', 1, 'Returns `yes` if the table contains a given value',
                ['value', 'The value to look for'], 'This is an expensive operation.').
        ProtoMethod('keys', 0, 'Returns an array of keys', [], '').
        ProtoMethod('values', 0, 'Returns an array of values', [], '').
        ProtoMethod('remove', 1, 'Removes the key-value pair with a given key',
                ['key', 'The key to remove'], '').
        ProtoMethod('removeValue', 1, 'Removes all key-value pairs with a given value',
                ['value', 'The value to remove'], 'This is a more costly operation than `remove`. All values that match `value` in the table will be removed.').
        ProtoMethod('addAll', 1, 'Adds all the elements from another table',
                ['other', 'The table whose elements you wish to add'],
                'Copies all of the key-value pairs from `other` to `self`, modifying `self` while leaving `other` unmodified.').
        ProtoMethod('op_get_index_', 1, 'Syntactic sugar around `[]`; see `get` above',
                ['key', 'The key to get'], '').
        ProtoMethod('op_set_index_', 2, 'Syntactic sugar for `[] =`; see `put` above',
                ['key', 'The key to use', 'value', 'The value to insert'], '').
        StaticMethod('new', 2, 'The main constructor; same as `[:]` literal',
                ['[keys]', 'An array of keys to add', '[values]', 'An array of values to add'],
                'This method, if provided with no arguments, will return an empty table. If two arguments are provided, they are interpreted to be an array of keys and an array of values respectively. In that case, a new table will be created by matching/building key-value pairs; `keys.count == values.count` must be true.').
    EndClass().
    Class('Time', 'A standard (not yet fully implemented) way to deal with times.').
        ProtoField('second', 'The current second value').
        ProtoField('minute', 'The current minute value').
        ProtoField('hour', 'The current hour value, 0-23').
        ProtoField('month', 'The current month of the year, 0-11').
        ProtoField('dayOfWeek', 'The current day of the week, 0-6').
        ProtoField('dayOfYear', 'The current day of the year, 0-364').
        ProtoField('year', 'The current year').
        ProtoField('db_', 'The binary blob containing C structure information').
        ProtoMethod('format', 1, 'Formats the time object according to a format string',
                ['format', 'The format string'],
                'The format string should be useable by the C standard `strftime` function.').
        ProtoMethod('stringify_', 0, 'Custom stringification function', [], '').
        StaticMethod('new', 1, 'Standard initializer for time objects',
                ['[table]', 'Optional initial values'],
                'If no argument is supplied, a new time object is returned as the current time and date. Otherwise, it is initialized based on the keys in `table`. The names of the keys should be the same as the names of the Prototype Fields above.').
        StaticMethod('unix', 0, 'Returns the number of milliseconds since the epoch', [], '').
    EndClass().
Render();
