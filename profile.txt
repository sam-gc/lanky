Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 19.61      0.10     0.10 10000019     0.00     0.00  mach_do_op
  9.81      0.15     0.05  6000062     0.00     0.00  arr_manage_size
  9.81      0.20     0.05  5000011     0.00     0.00  pop_node
  9.81      0.25     0.05  1000012     0.00     0.00  arr_create
  7.85      0.29     0.04  5000011     0.00     0.00  remove_at_index
  7.85      0.33     0.04        1    40.01   500.15  mach_eval
  5.88      0.36     0.03  6000062     0.00     0.00  arr_append
  5.88      0.39     0.03  1000002     0.00     0.00  lobjb_print
  4.90      0.42     0.03  5000008     0.00     0.00  rc_decr
  3.92      0.44     0.02  6000011     0.00     0.00  push_node
  3.92      0.46     0.02  1000008     0.00     0.00  lobjb_alloc
  2.94      0.47     0.02 10000131     0.00     0.00  arr_get
  1.96      0.48     0.01  5000017     0.00     0.00  rc_incr
  1.96      0.49     0.01  1000004     0.00     0.00  arr_set
  1.96      0.50     0.01  1000000     0.00     0.00  lobjb_binary_subtract
  0.98      0.51     0.01                             arr_insert
  0.98      0.51     0.01                             lobj_alloc
  0.00      0.51     0.00  5000011     0.00     0.00  arr_remove
  0.00      0.51     0.00  1000000     0.00     0.00  arr_free
  0.00      0.51     0.00  1000000     0.00     0.00  lobjb_clean
  0.00      0.51     0.00      100     0.00     0.00  free_add
  0.00      0.51     0.00      100     0.00     0.00  malloc_add
  0.00      0.51     0.00       50     0.00     0.00  append_to_list
  0.00      0.51     0.00       50     0.00     0.00  gen_node
  0.00      0.51     0.00       50     0.00     0.00  pool_add
  0.00      0.51     0.00       41     0.00     0.00  append_op
  0.00      0.51     0.00       36     0.00     0.00  yylex
  0.00      0.51     0.00       24     0.00     0.00  compile
  0.00      0.51     0.00       17     0.00     0.00  alloc_str
  0.00      0.51     0.00       17     0.00     0.00  create_value_node
  0.00      0.51     0.00       14     0.00     0.00  djb2
  0.00      0.51     0.00       12     0.00     0.00  compile_value
  0.00      0.51     0.00       12     0.00     0.00  lobjb_quick_compare
  0.00      0.51     0.00       11     0.00     0.00  hm_get
  0.00      0.51     0.00        8     0.00     0.00  compile_binary
  0.00      0.51     0.00        7     0.00     0.00  ast_add_node
  0.00      0.51     0.00        6     0.00     0.00  compile_var
  0.00      0.51     0.00        6     0.00     0.00  find_prev_const
  0.00      0.51     0.00        6     0.00     0.00  node_to_wrapper
  0.00      0.51     0.00        6     0.00     0.00  wrapper_to_obj
  0.00      0.51     0.00        5     0.00     0.00  create_assignment_node
  0.00      0.51     0.00        5     0.00     0.00  lobjb_serialize
  0.00      0.51     0.00        3     0.00     0.00  compile_unary
  0.00      0.51     0.00        3     0.00     0.00  create_binary_node
  0.00      0.51     0.00        3     0.00     0.00  create_unary_node
  0.00      0.51     0.00        3     0.00     0.00  get_next_local
  0.00      0.51     0.00        3     0.00     0.00  hm_put
  0.00      0.51     0.00        3     0.00     0.00  yy_load_buffer_state
  0.00      0.51     0.00        3     0.00     0.00  yyalloc
  0.00      0.51     0.00        2     0.00     0.00  compile_compound
  0.00      0.51     0.00        2     0.00     0.00  create_root_node
  0.00      0.51     0.00        2     0.00     0.00  get_line
  0.00      0.51     0.00        2     0.00     0.00  lobjb_binary_add
  0.00      0.51     0.00        2     0.00     0.00  make_node
  0.00      0.51     0.00        2     0.00     0.00  yy_flush_buffer
  0.00      0.51     0.00        2     0.00     0.00  yy_get_next_buffer
  0.00      0.51     0.00        2     0.00     0.00  yy_init_buffer
  0.00      0.51     0.00        2     0.00     0.00  yydestruct
  0.00      0.51     0.00        1     0.00     0.00  append_tag
  0.00      0.51     0.00        1     0.00     0.00  ast_free
  0.00      0.51     0.00        1     0.00     0.00  compile_ast
  0.00      0.51     0.00        1     0.00     0.00  compile_loop
  0.00      0.51     0.00        1     0.00     0.00  create_loop_node
  0.00      0.51     0.00        1     0.00     0.00  finalize_ops
  0.00      0.51     0.00        1     0.00     0.00  free_tag_nodes
  0.00      0.51     0.00        1     0.00     0.00  get_free_count
  0.00      0.51     0.00        1     0.00     0.00  get_malloc_count
  0.00      0.51     0.00        1     0.00     0.00  hm_create
  0.00      0.51     0.00        1     0.00   500.15  mach_execute
  0.00      0.51     0.00        1     0.00     0.00  next_if_tag
  0.00      0.51     0.00        1     0.00     0.00  pool_drain
  0.00      0.51     0.00        1     0.00     0.00  replace_tags
  0.00      0.51     0.00        1     0.00     0.00  write_to_file
  0.00      0.51     0.00        1     0.00     0.00  yy_create_buffer
  0.00      0.51     0.00        1     0.00     0.00  yy_get_previous_state
  0.00      0.51     0.00        1     0.00     0.00  yyensure_buffer_stack
  0.00      0.51     0.00        1     0.00     0.00  yyparse
  0.00      0.51     0.00        1     0.00     0.00  yyrestart

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.96% of 0.51 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     98.0    0.00    0.50                 main [1]
                0.00    0.50       1/1           mach_execute [2]
                0.00    0.00       1/1           compile_ast [21]
                0.00    0.00       1/1           write_to_file [35]
                0.00    0.00       1/1           yyparse [79]
                0.00    0.00       1/1           ast_free [68]
                0.00    0.00       1/1           get_free_count [71]
                0.00    0.00       1/1           get_malloc_count [72]
-----------------------------------------------
                0.00    0.50       1/1           main [1]
[2]     98.0    0.00    0.50       1         mach_execute [2]
                0.04    0.46       1/1           mach_eval [3]
                0.00    0.00       1/1000012     arr_create [11]
                0.00    0.00       1/6000062     arr_append [7]
-----------------------------------------------
                0.04    0.46       1/1           mach_execute [2]
[3]     98.0    0.04    0.46       1         mach_eval [3]
                0.10    0.36 10000019/10000019     mach_do_op [4]
-----------------------------------------------
                0.10    0.36 10000019/10000019     mach_eval [3]
[4]     90.2    0.10    0.36 10000019         mach_do_op [4]
                0.02    0.08 6000011/6000011     push_node [5]
                0.05    0.05 5000011/5000011     pop_node [6]
                0.01    0.07 1000000/1000000     lobjb_binary_subtract [8]
                0.03    0.00 1000002/1000002     lobjb_print [14]
                0.03    0.00 5000008/5000008     rc_decr [15]
                0.01    0.00 1000004/1000004     arr_set [18]
                0.01    0.00 5000011/5000017     rc_incr [17]
                0.01    0.00 5000013/10000131     arr_get [16]
                0.00    0.00       2/2           lobjb_binary_add [29]
-----------------------------------------------
                0.02    0.08 6000011/6000011     mach_do_op [4]
[5]     19.6    0.02    0.08 6000011         push_node [5]
                0.03    0.05 6000011/6000062     arr_append [7]
-----------------------------------------------
                0.05    0.05 5000011/5000011     mach_do_op [4]
[6]     19.1    0.05    0.05 5000011         pop_node [6]
                0.00    0.04 5000011/5000011     arr_remove [12]
                0.01    0.00 5000011/10000131     arr_get [16]
-----------------------------------------------
                0.00    0.00       1/6000062     mach_execute [2]
                0.00    0.00       4/6000062     compile_loop <cycle 1> [32]
                0.00    0.00       5/6000062     compile_value [24]
                0.00    0.00      41/6000062     append_op [25]
                0.03    0.05 6000011/6000062     push_node [5]
[7]     15.7    0.03    0.05 6000062         arr_append [7]
                0.05    0.00 6000062/6000062     arr_manage_size [10]
-----------------------------------------------
                0.01    0.07 1000000/1000000     mach_do_op [4]
[8]     15.7    0.01    0.07 1000000         lobjb_binary_subtract [8]
                0.02    0.05 1000000/1000008     lobjb_alloc [9]
-----------------------------------------------
                0.00    0.00       2/1000008     lobjb_binary_add [29]
                0.00    0.00       6/1000008     wrapper_to_obj [26]
                0.02    0.05 1000000/1000008     lobjb_binary_subtract [8]
[9]     13.7    0.02    0.05 1000008         lobjb_alloc [9]
                0.05    0.00 1000008/1000012     arr_create [11]
-----------------------------------------------
                0.05    0.00 6000062/6000062     arr_append [7]
[10]     9.8    0.05    0.00 6000062         arr_manage_size [10]
-----------------------------------------------
                0.00    0.00       1/1000012     mach_execute [2]
                0.00    0.00       3/1000012     compile_ast [21]
                0.05    0.00 1000008/1000012     lobjb_alloc [9]
[11]     9.8    0.05    0.00 1000012         arr_create [11]
-----------------------------------------------
                0.00    0.04 5000011/5000011     pop_node [6]
[12]     7.8    0.00    0.04 5000011         arr_remove [12]
                0.04    0.00 5000011/5000011     remove_at_index [13]
-----------------------------------------------
                0.04    0.00 5000011/5000011     arr_remove [12]
[13]     7.8    0.04    0.00 5000011         remove_at_index [13]
-----------------------------------------------
                0.03    0.00 1000002/1000002     mach_do_op [4]
[14]     5.9    0.03    0.00 1000002         lobjb_print [14]
-----------------------------------------------
                0.03    0.00 5000008/5000008     mach_do_op [4]
[15]     4.9    0.03    0.00 5000008         rc_decr [15]
                0.00    0.00 1000000/1000000     lobjb_clean [37]
                0.00    0.00 1000000/1000000     arr_free [36]
-----------------------------------------------
                0.00    0.00       5/10000131     write_to_file [35]
                0.00    0.00      12/10000131     find_prev_const [34]
                0.00    0.00      45/10000131     finalize_ops [30]
                0.00    0.00      45/10000131     replace_tags [31]
                0.01    0.00 5000011/10000131     pop_node [6]
                0.01    0.00 5000013/10000131     mach_do_op [4]
[16]     2.9    0.02    0.00 10000131         arr_get [16]
-----------------------------------------------
                0.00    0.00       6/5000017     compile_value [24]
                0.01    0.00 5000011/5000017     mach_do_op [4]
[17]     2.0    0.01    0.00 5000017         rc_incr [17]
-----------------------------------------------
                0.01    0.00 1000004/1000004     mach_do_op [4]
[18]     2.0    0.01    0.00 1000004         arr_set [18]
-----------------------------------------------
                                                 <spontaneous>
[19]     1.0    0.01    0.00                 arr_insert [19]
-----------------------------------------------
                                                 <spontaneous>
[20]     1.0    0.01    0.00                 lobj_alloc [20]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[21]     0.0    0.00    0.00       1         compile_ast [21]
                0.00    0.00       1/1           compile_compound <cycle 1> [59]
                0.00    0.00       3/1000012     arr_create [11]
                0.00    0.00       1/1           replace_tags [31]
                0.00    0.00       1/1           finalize_ops [30]
                0.00    0.00       1/1           hm_create [73]
-----------------------------------------------
[22]     0.0    0.00    0.00       1+37      <cycle 1 as a whole> [22]
                0.00    0.00      24             compile <cycle 1> [23]
                0.00    0.00       8             compile_binary <cycle 1> [27]
                0.00    0.00       1             compile_loop <cycle 1> [32]
                0.00    0.00       3             compile_unary <cycle 1> [33]
                0.00    0.00       2             compile_compound <cycle 1> [59]
-----------------------------------------------
                                   3             compile_loop <cycle 1> [32]
                                   3             compile_unary <cycle 1> [33]
                                   7             compile_compound <cycle 1> [59]
                                  11             compile_binary <cycle 1> [27]
[23]     0.0    0.00    0.00      24         compile <cycle 1> [23]
                0.00    0.00      12/12          compile_value [24]
                                   8             compile_binary <cycle 1> [27]
                                   3             compile_unary <cycle 1> [33]
                                   1             compile_loop <cycle 1> [32]
-----------------------------------------------
                0.00    0.00      12/12          compile <cycle 1> [23]
[24]     0.0    0.00    0.00      12         compile_value [24]
                0.00    0.00       6/6           wrapper_to_obj [26]
                0.00    0.00      12/41          append_op [25]
                0.00    0.00       6/6           compile_var [28]
                0.00    0.00       5/6000062     arr_append [7]
                0.00    0.00       6/6           find_prev_const [34]
                0.00    0.00       6/5000017     rc_incr [17]
                0.00    0.00       6/6           node_to_wrapper [50]
-----------------------------------------------
                0.00    0.00       1/41          compile_loop <cycle 1> [32]
                0.00    0.00       3/41          compile_unary <cycle 1> [33]
                0.00    0.00      12/41          compile_var [28]
                0.00    0.00      12/41          compile_value [24]
                0.00    0.00      13/41          compile_binary <cycle 1> [27]
[25]     0.0    0.00    0.00      41         append_op [25]
                0.00    0.00      41/6000062     arr_append [7]
-----------------------------------------------
                0.00    0.00       6/6           compile_value [24]
[26]     0.0    0.00    0.00       6         wrapper_to_obj [26]
                0.00    0.00       6/1000008     lobjb_alloc [9]
-----------------------------------------------
                                   8             compile <cycle 1> [23]
[27]     0.0    0.00    0.00       8         compile_binary <cycle 1> [27]
                0.00    0.00      13/41          append_op [25]
                0.00    0.00       5/11          hm_get [48]
                0.00    0.00       3/3           get_next_local [55]
                0.00    0.00       3/3           hm_put [56]
                                  11             compile <cycle 1> [23]
-----------------------------------------------
                0.00    0.00       6/6           compile_value [24]
[28]     0.0    0.00    0.00       6         compile_var [28]
                0.00    0.00      12/41          append_op [25]
                0.00    0.00       6/11          hm_get [48]
-----------------------------------------------
                0.00    0.00       2/2           mach_do_op [4]
[29]     0.0    0.00    0.00       2         lobjb_binary_add [29]
                0.00    0.00       2/1000008     lobjb_alloc [9]
-----------------------------------------------
                0.00    0.00       1/1           compile_ast [21]
[30]     0.0    0.00    0.00       1         finalize_ops [30]
                0.00    0.00      45/10000131     arr_get [16]
-----------------------------------------------
                0.00    0.00       1/1           compile_ast [21]
[31]     0.0    0.00    0.00       1         replace_tags [31]
                0.00    0.00      45/10000131     arr_get [16]
                0.00    0.00       2/2           get_line [61]
                0.00    0.00       1/2           make_node [62]
                0.00    0.00       1/1           append_tag [67]
                0.00    0.00       1/1           free_tag_nodes [70]
-----------------------------------------------
                                   1             compile <cycle 1> [23]
[32]     0.0    0.00    0.00       1         compile_loop <cycle 1> [32]
                0.00    0.00       4/6000062     arr_append [7]
                0.00    0.00       1/41          append_op [25]
                0.00    0.00       1/1           next_if_tag [74]
                                   3             compile <cycle 1> [23]
                                   1             compile_compound <cycle 1> [59]
-----------------------------------------------
                                   3             compile <cycle 1> [23]
[33]     0.0    0.00    0.00       3         compile_unary <cycle 1> [33]
                0.00    0.00       3/41          append_op [25]
                                   3             compile <cycle 1> [23]
-----------------------------------------------
                0.00    0.00       6/6           compile_value [24]
[34]     0.0    0.00    0.00       6         find_prev_const [34]
                0.00    0.00      12/10000131     arr_get [16]
                0.00    0.00      12/12          lobjb_quick_compare [47]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[35]     0.0    0.00    0.00       1         write_to_file [35]
                0.00    0.00       5/10000131     arr_get [16]
                0.00    0.00       5/5           lobjb_serialize [52]
-----------------------------------------------
                0.00    0.00 1000000/1000000     rc_decr [15]
[36]     0.0    0.00    0.00 1000000         arr_free [36]
-----------------------------------------------
                0.00    0.00 1000000/1000000     rc_decr [15]
[37]     0.0    0.00    0.00 1000000         lobjb_clean [37]
-----------------------------------------------
                0.00    0.00     100/100         pool_drain [75]
[38]     0.0    0.00    0.00     100         free_add [38]
-----------------------------------------------
                0.00    0.00       1/100         create_loop_node [69]
                0.00    0.00       2/100         create_root_node [60]
                0.00    0.00       3/100         create_binary_node [53]
                0.00    0.00       3/100         create_unary_node [54]
                0.00    0.00       5/100         create_assignment_node [51]
                0.00    0.00      17/100         alloc_str [44]
                0.00    0.00      19/100         create_value_node [45]
                0.00    0.00      50/100         gen_node [41]
[39]     0.0    0.00    0.00     100         malloc_add [39]
-----------------------------------------------
                0.00    0.00      50/50          pool_add [42]
[40]     0.0    0.00    0.00      50         append_to_list [40]
-----------------------------------------------
                0.00    0.00      50/50          pool_add [42]
[41]     0.0    0.00    0.00      50         gen_node [41]
                0.00    0.00      50/100         malloc_add [39]
-----------------------------------------------
                0.00    0.00       1/50          create_loop_node [69]
                0.00    0.00       2/50          create_root_node [60]
                0.00    0.00       3/50          create_binary_node [53]
                0.00    0.00       3/50          create_unary_node [54]
                0.00    0.00       5/50          create_assignment_node [51]
                0.00    0.00      17/50          alloc_str [44]
                0.00    0.00      19/50          create_value_node [45]
[42]     0.0    0.00    0.00      50         pool_add [42]
                0.00    0.00      50/50          gen_node [41]
                0.00    0.00      50/50          append_to_list [40]
-----------------------------------------------
                0.00    0.00      36/36          yyparse [79]
[43]     0.0    0.00    0.00      36         yylex [43]
                0.00    0.00      17/17          alloc_str [44]
                0.00    0.00       2/2           yy_get_next_buffer [64]
                0.00    0.00       1/1           yyensure_buffer_stack [78]
                0.00    0.00       1/1           yy_create_buffer [76]
                0.00    0.00       1/3           yy_load_buffer_state [57]
                0.00    0.00       1/1           yy_get_previous_state [77]
-----------------------------------------------
                0.00    0.00      17/17          yylex [43]
[44]     0.0    0.00    0.00      17         alloc_str [44]
                0.00    0.00      17/100         malloc_add [39]
                0.00    0.00      17/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       5/17          create_assignment_node [51]
                0.00    0.00      12/17          yyparse [79]
[45]     0.0    0.00    0.00      17         create_value_node [45]
                0.00    0.00      19/100         malloc_add [39]
                0.00    0.00      19/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       3/14          hm_put [56]
                0.00    0.00      11/14          hm_get [48]
[46]     0.0    0.00    0.00      14         djb2 [46]
-----------------------------------------------
                0.00    0.00      12/12          find_prev_const [34]
[47]     0.0    0.00    0.00      12         lobjb_quick_compare [47]
-----------------------------------------------
                0.00    0.00       5/11          compile_binary <cycle 1> [27]
                0.00    0.00       6/11          compile_var [28]
[48]     0.0    0.00    0.00      11         hm_get [48]
                0.00    0.00      11/14          djb2 [46]
-----------------------------------------------
                0.00    0.00       7/7           yyparse [79]
[49]     0.0    0.00    0.00       7         ast_add_node [49]
-----------------------------------------------
                0.00    0.00       6/6           compile_value [24]
[50]     0.0    0.00    0.00       6         node_to_wrapper [50]
-----------------------------------------------
                0.00    0.00       5/5           yyparse [79]
[51]     0.0    0.00    0.00       5         create_assignment_node [51]
                0.00    0.00       5/100         malloc_add [39]
                0.00    0.00       5/50          pool_add [42]
                0.00    0.00       5/17          create_value_node [45]
-----------------------------------------------
                0.00    0.00       5/5           write_to_file [35]
[52]     0.0    0.00    0.00       5         lobjb_serialize [52]
-----------------------------------------------
                0.00    0.00       3/3           yyparse [79]
[53]     0.0    0.00    0.00       3         create_binary_node [53]
                0.00    0.00       3/100         malloc_add [39]
                0.00    0.00       3/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       3/3           yyparse [79]
[54]     0.0    0.00    0.00       3         create_unary_node [54]
                0.00    0.00       3/100         malloc_add [39]
                0.00    0.00       3/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       3/3           compile_binary <cycle 1> [27]
[55]     0.0    0.00    0.00       3         get_next_local [55]
-----------------------------------------------
                0.00    0.00       3/3           compile_binary <cycle 1> [27]
[56]     0.0    0.00    0.00       3         hm_put [56]
                0.00    0.00       3/14          djb2 [46]
-----------------------------------------------
                0.00    0.00       1/3           yylex [43]
                0.00    0.00       1/3           yyrestart [80]
                0.00    0.00       1/3           yy_flush_buffer [63]
[57]     0.0    0.00    0.00       3         yy_load_buffer_state [57]
-----------------------------------------------
                0.00    0.00       1/3           yyensure_buffer_stack [78]
                0.00    0.00       2/3           yy_create_buffer [76]
[58]     0.0    0.00    0.00       3         yyalloc [58]
-----------------------------------------------
                                   1             compile_loop <cycle 1> [32]
                0.00    0.00       1/1           compile_ast [21]
[59]     0.0    0.00    0.00       2         compile_compound <cycle 1> [59]
                                   7             compile <cycle 1> [23]
-----------------------------------------------
                0.00    0.00       2/2           yyparse [79]
[60]     0.0    0.00    0.00       2         create_root_node [60]
                0.00    0.00       2/100         malloc_add [39]
                0.00    0.00       2/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       2/2           replace_tags [31]
[61]     0.0    0.00    0.00       2         get_line [61]
-----------------------------------------------
                0.00    0.00       1/2           append_tag [67]
                0.00    0.00       1/2           replace_tags [31]
[62]     0.0    0.00    0.00       2         make_node [62]
-----------------------------------------------
                0.00    0.00       2/2           yy_init_buffer [65]
[63]     0.0    0.00    0.00       2         yy_flush_buffer [63]
                0.00    0.00       1/3           yy_load_buffer_state [57]
-----------------------------------------------
                0.00    0.00       2/2           yylex [43]
[64]     0.0    0.00    0.00       2         yy_get_next_buffer [64]
                0.00    0.00       1/1           yyrestart [80]
-----------------------------------------------
                0.00    0.00       1/2           yyrestart [80]
                0.00    0.00       1/2           yy_create_buffer [76]
[65]     0.0    0.00    0.00       2         yy_init_buffer [65]
                0.00    0.00       2/2           yy_flush_buffer [63]
-----------------------------------------------
                0.00    0.00       2/2           yyparse [79]
[66]     0.0    0.00    0.00       2         yydestruct [66]
-----------------------------------------------
                0.00    0.00       1/1           replace_tags [31]
[67]     0.0    0.00    0.00       1         append_tag [67]
                0.00    0.00       1/2           make_node [62]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[68]     0.0    0.00    0.00       1         ast_free [68]
                0.00    0.00       1/1           pool_drain [75]
-----------------------------------------------
                0.00    0.00       1/1           yyparse [79]
[69]     0.0    0.00    0.00       1         create_loop_node [69]
                0.00    0.00       1/100         malloc_add [39]
                0.00    0.00       1/50          pool_add [42]
-----------------------------------------------
                0.00    0.00       1/1           replace_tags [31]
[70]     0.0    0.00    0.00       1         free_tag_nodes [70]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[71]     0.0    0.00    0.00       1         get_free_count [71]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[72]     0.0    0.00    0.00       1         get_malloc_count [72]
-----------------------------------------------
                0.00    0.00       1/1           compile_ast [21]
[73]     0.0    0.00    0.00       1         hm_create [73]
-----------------------------------------------
                0.00    0.00       1/1           compile_loop <cycle 1> [32]
[74]     0.0    0.00    0.00       1         next_if_tag [74]
-----------------------------------------------
                0.00    0.00       1/1           ast_free [68]
[75]     0.0    0.00    0.00       1         pool_drain [75]
                0.00    0.00     100/100         free_add [38]
-----------------------------------------------
                0.00    0.00       1/1           yylex [43]
[76]     0.0    0.00    0.00       1         yy_create_buffer [76]
                0.00    0.00       2/3           yyalloc [58]
                0.00    0.00       1/2           yy_init_buffer [65]
-----------------------------------------------
                0.00    0.00       1/1           yylex [43]
[77]     0.0    0.00    0.00       1         yy_get_previous_state [77]
-----------------------------------------------
                0.00    0.00       1/1           yylex [43]
[78]     0.0    0.00    0.00       1         yyensure_buffer_stack [78]
                0.00    0.00       1/3           yyalloc [58]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[79]     0.0    0.00    0.00       1         yyparse [79]
                0.00    0.00      36/36          yylex [43]
                0.00    0.00      12/17          create_value_node [45]
                0.00    0.00       7/7           ast_add_node [49]
                0.00    0.00       5/5           create_assignment_node [51]
                0.00    0.00       3/3           create_binary_node [53]
                0.00    0.00       3/3           create_unary_node [54]
                0.00    0.00       2/2           create_root_node [60]
                0.00    0.00       2/2           yydestruct [66]
                0.00    0.00       1/1           create_loop_node [69]
-----------------------------------------------
                0.00    0.00       1/1           yy_get_next_buffer [64]
[80]     0.0    0.00    0.00       1         yyrestart [80]
                0.00    0.00       1/3           yy_load_buffer_state [57]
                0.00    0.00       1/2           yy_init_buffer [65]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [44] alloc_str              [45] create_value_node      [74] next_if_tag
  [25] append_op              [46] djb2                   [50] node_to_wrapper
  [67] append_tag             [30] finalize_ops           [42] pool_add
  [40] append_to_list         [34] find_prev_const        [75] pool_drain
   [7] arr_append             [38] free_add                [6] pop_node
  [11] arr_create             [70] free_tag_nodes          [5] push_node
  [36] arr_free               [41] gen_node               [15] rc_decr
  [16] arr_get                [71] get_free_count         [17] rc_incr
  [19] arr_insert             [61] get_line               [13] remove_at_index
  [10] arr_manage_size        [72] get_malloc_count       [31] replace_tags
  [12] arr_remove             [55] get_next_local         [26] wrapper_to_obj
  [18] arr_set                [73] hm_create              [35] write_to_file
  [49] ast_add_node           [48] hm_get                 [76] yy_create_buffer
  [68] ast_free               [56] hm_put                 [63] yy_flush_buffer
  [23] compile                [20] lobj_alloc             [64] yy_get_next_buffer
  [21] compile_ast             [9] lobjb_alloc            [77] yy_get_previous_state
  [27] compile_binary         [29] lobjb_binary_add       [65] yy_init_buffer
  [59] compile_compound        [8] lobjb_binary_subtract  [57] yy_load_buffer_state
  [32] compile_loop           [37] lobjb_clean            [58] yyalloc
  [33] compile_unary          [14] lobjb_print            [66] yydestruct
  [24] compile_value          [47] lobjb_quick_compare    [78] yyensure_buffer_stack
  [28] compile_var            [52] lobjb_serialize        [43] yylex
  [51] create_assignment_node  [4] mach_do_op             [79] yyparse
  [53] create_binary_node      [3] mach_eval              [80] yyrestart
  [69] create_loop_node        [2] mach_execute           [22] <cycle 1>
  [60] create_root_node       [62] make_node
  [54] create_unary_node      [39] malloc_add
